// Code generated by Kitex v0.11.3. DO NOT EDIT.

package favoritesrv

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	favorite "github.com/renxingdawang/easy-tok/kitex_gen/easy/tok/favorite"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"FavoriteAction": kitex.NewMethodInfo(
		favoriteActionHandler,
		newFavoriteSrvFavoriteActionArgs,
		newFavoriteSrvFavoriteActionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"FavoriteList": kitex.NewMethodInfo(
		favoriteListHandler,
		newFavoriteSrvFavoriteListArgs,
		newFavoriteSrvFavoriteListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	favoriteSrvServiceInfo                = NewServiceInfo()
	favoriteSrvServiceInfoForClient       = NewServiceInfoForClient()
	favoriteSrvServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return favoriteSrvServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return favoriteSrvServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return favoriteSrvServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "FavoriteSrv"
	handlerType := (*favorite.FavoriteSrv)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "favorite",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.11.3",
		Extra:           extra,
	}
	return svcInfo
}

func favoriteActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteSrvFavoriteActionArgs)
	realResult := result.(*favorite.FavoriteSrvFavoriteActionResult)
	success, err := handler.(favorite.FavoriteSrv).FavoriteAction(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteSrvFavoriteActionArgs() interface{} {
	return favorite.NewFavoriteSrvFavoriteActionArgs()
}

func newFavoriteSrvFavoriteActionResult() interface{} {
	return favorite.NewFavoriteSrvFavoriteActionResult()
}

func favoriteListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteSrvFavoriteListArgs)
	realResult := result.(*favorite.FavoriteSrvFavoriteListResult)
	success, err := handler.(favorite.FavoriteSrv).FavoriteList(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteSrvFavoriteListArgs() interface{} {
	return favorite.NewFavoriteSrvFavoriteListArgs()
}

func newFavoriteSrvFavoriteListResult() interface{} {
	return favorite.NewFavoriteSrvFavoriteListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) FavoriteAction(ctx context.Context, request *favorite.TokFavoriteActionRequest) (r *favorite.TokFavoriteActionResponse, err error) {
	var _args favorite.FavoriteSrvFavoriteActionArgs
	_args.Request = request
	var _result favorite.FavoriteSrvFavoriteActionResult
	if err = p.c.Call(ctx, "FavoriteAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FavoriteList(ctx context.Context, request *favorite.TokFavoriteListRequest) (r *favorite.TokFavoriteListResponse, err error) {
	var _args favorite.FavoriteSrvFavoriteListArgs
	_args.Request = request
	var _result favorite.FavoriteSrvFavoriteListResult
	if err = p.c.Call(ctx, "FavoriteList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
