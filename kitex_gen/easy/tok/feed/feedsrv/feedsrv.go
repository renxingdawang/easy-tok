// Code generated by Kitex v0.11.3. DO NOT EDIT.

package feedsrv

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	feed "github.com/renxingdawang/easy-tok/kitex_gen/easy/tok/feed"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"GetUserFeed": kitex.NewMethodInfo(
		getUserFeedHandler,
		newFeedSrvGetUserFeedArgs,
		newFeedSrvGetUserFeedResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetVideoById": kitex.NewMethodInfo(
		getVideoByIdHandler,
		newFeedSrvGetVideoByIdArgs,
		newFeedSrvGetVideoByIdResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	feedSrvServiceInfo                = NewServiceInfo()
	feedSrvServiceInfoForClient       = NewServiceInfoForClient()
	feedSrvServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return feedSrvServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return feedSrvServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return feedSrvServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "FeedSrv"
	handlerType := (*feed.FeedSrv)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "feed",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.11.3",
		Extra:           extra,
	}
	return svcInfo
}

func getUserFeedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*feed.FeedSrvGetUserFeedArgs)
	realResult := result.(*feed.FeedSrvGetUserFeedResult)
	success, err := handler.(feed.FeedSrv).GetUserFeed(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFeedSrvGetUserFeedArgs() interface{} {
	return feed.NewFeedSrvGetUserFeedArgs()
}

func newFeedSrvGetUserFeedResult() interface{} {
	return feed.NewFeedSrvGetUserFeedResult()
}

func getVideoByIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*feed.FeedSrvGetVideoByIdArgs)
	realResult := result.(*feed.FeedSrvGetVideoByIdResult)
	success, err := handler.(feed.FeedSrv).GetVideoById(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFeedSrvGetVideoByIdArgs() interface{} {
	return feed.NewFeedSrvGetVideoByIdArgs()
}

func newFeedSrvGetVideoByIdResult() interface{} {
	return feed.NewFeedSrvGetVideoByIdResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetUserFeed(ctx context.Context, request *feed.TokFeedRequest) (r *feed.TokFeedResponse, err error) {
	var _args feed.FeedSrvGetUserFeedArgs
	_args.Request = request
	var _result feed.FeedSrvGetUserFeedResult
	if err = p.c.Call(ctx, "GetUserFeed", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVideoById(ctx context.Context, request *feed.TokFeedRequest) (r *feed.TokVideo, err error) {
	var _args feed.FeedSrvGetVideoByIdArgs
	_args.Request = request
	var _result feed.FeedSrvGetVideoByIdResult
	if err = p.c.Call(ctx, "GetVideoById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
