// Code generated by Kitex v0.11.3. DO NOT EDIT.

package relationsrv

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	relation "github.com/renxingdawang/easy-tok/kitex_gen/easy/tok/relation"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"RelationAction": kitex.NewMethodInfo(
		relationActionHandler,
		newRelationSrvRelationActionArgs,
		newRelationSrvRelationActionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"RelationFollowList": kitex.NewMethodInfo(
		relationFollowListHandler,
		newRelationSrvRelationFollowListArgs,
		newRelationSrvRelationFollowListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"RelationFollowerList": kitex.NewMethodInfo(
		relationFollowerListHandler,
		newRelationSrvRelationFollowerListArgs,
		newRelationSrvRelationFollowerListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	relationSrvServiceInfo                = NewServiceInfo()
	relationSrvServiceInfoForClient       = NewServiceInfoForClient()
	relationSrvServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return relationSrvServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return relationSrvServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return relationSrvServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "RelationSrv"
	handlerType := (*relation.RelationSrv)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "relation",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.11.3",
		Extra:           extra,
	}
	return svcInfo
}

func relationActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationSrvRelationActionArgs)
	realResult := result.(*relation.RelationSrvRelationActionResult)
	success, err := handler.(relation.RelationSrv).RelationAction(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationSrvRelationActionArgs() interface{} {
	return relation.NewRelationSrvRelationActionArgs()
}

func newRelationSrvRelationActionResult() interface{} {
	return relation.NewRelationSrvRelationActionResult()
}

func relationFollowListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationSrvRelationFollowListArgs)
	realResult := result.(*relation.RelationSrvRelationFollowListResult)
	success, err := handler.(relation.RelationSrv).RelationFollowList(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationSrvRelationFollowListArgs() interface{} {
	return relation.NewRelationSrvRelationFollowListArgs()
}

func newRelationSrvRelationFollowListResult() interface{} {
	return relation.NewRelationSrvRelationFollowListResult()
}

func relationFollowerListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationSrvRelationFollowerListArgs)
	realResult := result.(*relation.RelationSrvRelationFollowerListResult)
	success, err := handler.(relation.RelationSrv).RelationFollowerList(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationSrvRelationFollowerListArgs() interface{} {
	return relation.NewRelationSrvRelationFollowerListArgs()
}

func newRelationSrvRelationFollowerListResult() interface{} {
	return relation.NewRelationSrvRelationFollowerListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) RelationAction(ctx context.Context, request *relation.TokRelationActionRequest) (r *relation.TokRelationActionResponse, err error) {
	var _args relation.RelationSrvRelationActionArgs
	_args.Request = request
	var _result relation.RelationSrvRelationActionResult
	if err = p.c.Call(ctx, "RelationAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RelationFollowList(ctx context.Context, request *relation.TokRelationFollowListRequest) (r *relation.TokRelationFollowListResponse, err error) {
	var _args relation.RelationSrvRelationFollowListArgs
	_args.Request = request
	var _result relation.RelationSrvRelationFollowListResult
	if err = p.c.Call(ctx, "RelationFollowList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RelationFollowerList(ctx context.Context, request *relation.TokRelationFollowerListRequest) (r *relation.TokRelationFollowerListResponse, err error) {
	var _args relation.RelationSrvRelationFollowerListArgs
	_args.Request = request
	var _result relation.RelationSrvRelationFollowerListResult
	if err = p.c.Call(ctx, "RelationFollowerList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
