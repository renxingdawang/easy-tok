// Code generated by Kitex v0.11.3. DO NOT EDIT.

package commentsrv

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	comment "github.com/renxingdawang/easy-tok/kitex_gen/easy/tok/comment"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CommentAction": kitex.NewMethodInfo(
		commentActionHandler,
		newCommentSrvCommentActionArgs,
		newCommentSrvCommentActionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CommentList": kitex.NewMethodInfo(
		commentListHandler,
		newCommentSrvCommentListArgs,
		newCommentSrvCommentListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	commentSrvServiceInfo                = NewServiceInfo()
	commentSrvServiceInfoForClient       = NewServiceInfoForClient()
	commentSrvServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return commentSrvServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return commentSrvServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return commentSrvServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "CommentSrv"
	handlerType := (*comment.CommentSrv)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "comment",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.11.3",
		Extra:           extra,
	}
	return svcInfo
}

func commentActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*comment.CommentSrvCommentActionArgs)
	realResult := result.(*comment.CommentSrvCommentActionResult)
	success, err := handler.(comment.CommentSrv).CommentAction(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommentSrvCommentActionArgs() interface{} {
	return comment.NewCommentSrvCommentActionArgs()
}

func newCommentSrvCommentActionResult() interface{} {
	return comment.NewCommentSrvCommentActionResult()
}

func commentListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*comment.CommentSrvCommentListArgs)
	realResult := result.(*comment.CommentSrvCommentListResult)
	success, err := handler.(comment.CommentSrv).CommentList(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommentSrvCommentListArgs() interface{} {
	return comment.NewCommentSrvCommentListArgs()
}

func newCommentSrvCommentListResult() interface{} {
	return comment.NewCommentSrvCommentListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CommentAction(ctx context.Context, request *comment.TokCommentActionRequest) (r *comment.TokCommentActionResponse, err error) {
	var _args comment.CommentSrvCommentActionArgs
	_args.Request = request
	var _result comment.CommentSrvCommentActionResult
	if err = p.c.Call(ctx, "CommentAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentList(ctx context.Context, request *comment.TokCommentActionRequest) (r *comment.TokCommentListResponse, err error) {
	var _args comment.CommentSrvCommentListArgs
	_args.Request = request
	var _result comment.CommentSrvCommentListResult
	if err = p.c.Call(ctx, "CommentList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
